version: "3.8"

services:
  postgres:
    image: "postgis/postgis:12-3.1"
    volumes:
      - "./postgresql-data:/var/lib/postgresql/data"
    env_file:
      - ".env"

  web:
    container_name: cl-docker-back-web
    depends_on:
      - "postgres"
      - "rabbitmq"
      - 'memcached'
    image: citizenlabdotco/back-essential:${CL_VERSION}
    volumes:
      - "./uploads:/cl2_back/public/uploads"
    env_file:
      - ".env"
    environment:
      RAILS_ENV: production

  que:
    container_name: cl-docker-que
    depends_on:
      - "postgres"
      - "rabbitmq"
    image: citizenlabdotco/back-essential:${CL_VERSION}
    command: bundle exec que
    volumes:
      - "./uploads:/cl2_back/public/uploads"
    env_file:
      - ".env"
    environment:
      RAILS_ENV: production

  rabbitmq:
    container_name: cl-docker-back-rabbit
    image: "rabbitmq:3.7"

  front:
    container_name: cl-docker-front
    image: citizenlabdotco/front-essential:${CL_VERSION}
    environment:
      NODE_ENV: production
    env_file:
      - ".env"
    command: npm run start:production

  memcached:
    image: memcached:alpine
    command: memcached -m 64

  caddy:
    image: caddy:2
    restart: unless-stopped
    depends_on:
      - "web"
      - "front"
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - ".env"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - "./uploads:/uploads:ro"
      - caddy_data:/data
      - caddy_config:/config

volumes:
  caddy_data:
  caddy_config:
networks:
  default:
    name: cl-docker
